import * as util from "../../../util/util";
import * as test from "../../../util/test";
import chalk from "chalk";
import * as LOGUTIL from "../../../util/log";
import { performance } from "perf_hooks";
const { log, logSolution, trace } = LOGUTIL;

const YEAR = {year};
const DAY = {day};
const DEBUG = true;
LOGUTIL.setDebug(DEBUG);

// solution path: {solution_path}
// data path    : {data_path}
// problem url  : {problem_url}

async function p{year}day{day}_part1(input: string) {
	return "Not implemented";
}

async function p{year}day{day}_part2(input: string) {
	return "Not implemented";
}

async function run() {
	const part1tests: TestCase[] = [];
	const part2tests: TestCase[] = [];

	// Run tests
	test.beginTests()
	test.beginSection();
	for (const testCase of part1tests) {
		test.logTestResult(testCase, String(await p{year}day{day}_part1(testCase.input)));
	}
	test.beginSection();
	for (const testCase of part2tests) {
		test.logTestResult(testCase, String(await p{year}day{day}_part2(testCase.input)));
	}
	test.endTests();

	// Get input and run program while measuring performance
	const input = await util.getInput(DAY, YEAR);

	const part1Before = performance.now();
	const part1Solution = String(await p{year}day{day}_part1(input));
	const part1After = performance.now();

	const part2Before = performance.now()
	const part2Solution = String(await p{year}day{day}_part2(input));
	const part2After = performance.now();
	
	logSolution(DAY, YEAR, part1Solution, part2Solution);

	log(chalk.gray("--- Performance ---"));
	log(chalk.gray(`Part 1: ${util.msToString(part1After - part1Before)}`));
	log(chalk.gray(`Part 2: ${util.msToString(part2After - part2Before)}`));
	log();
}

export default (): void => {
  run()
    .then(() => {
      process.exit();
    })
    .catch(error => {
      throw error;
    });
};
